# https://www.nginx.com/blog/tuning-nginx/
# https://www.nginx.com/blog/nginx-caching-guide/
# https://www.nginx.com/blog/nginx-high-performance-caching/
# https://github.com/trimstray/nginx-admins-handbook

# workerプロセス数(auto: CPUコア数に合わせて設定)
worker_processes auto;
# ファイルディスクリプタ上限数
worker_rlimit_nofile 150000;

events {
  # 一つのworkerプロセスあたりの最大接続数
  worker_connections 65535;
  # リクエストを複数同時に受けるか
  multi_accept on;
  # コネクションの処理方法
  use epoll;
}

http {
  # レスポンスヘッダのContent-Typeに設定する文字コード
  charset utf-8;
  # データ転送の効率化をする
  sendfile on;
  # パケット数の最小化をする
  tcp_nopush on;
  # レスポンスヘッダにnginxバージョンを含めない
  server_tokens off;
  # リクエストボディの最大許容サイズ
  client_max_body_size 16M;

  # アクセスログフォーマット
  log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

  # access_log off;
  access_log /dev/stdout main;
  error_log /dev/stderr warn;

  # keep-aliveタイムアウト時間(デフォルト:75)
  keepalive_timeout 30;
  # クライアントリクエストヘッダ読み込みタイムアウト時間(デフォルト:60)
  client_header_timeout 60;
  # クライアントリクエストボディ読み込みタイムアウト時間(デフォルト:60)
  client_body_timeout 10;
  # クライアントへのレスポンスタイムアウト時間(デフォルト:60)
  send_timeout 2;
  # タイムアウト済み接続をクローズする
  reset_timedout_connection on;
  # 単一のkeepalive接続での最大リクエスト数(デフォルト値:100)。負荷テスト時に拡張する。
  # keepalive_requests 100000;

  include /etc/nginx/mime.types;
  default_type text/html;

  # 転送量削減のためにレスポンスをgzip圧縮する
  gzip on;
  # Accept-EncodingヘッダーにVary: Accept-Encodingを付与する
  gzip_vary on;
  # すべてのプロキシをgzip圧縮する
  gzip_proxied any;
  # gzip圧縮レベル(1-9)
  gzip_comp_level 1;
  # gzip対象ファイル・タイプ
  gzip_types text/plain text/css text/xml application/json application/javascript application/rss+xml application/atom+xml image/svg+xml;
  # gzip圧縮対象の最小サイズ(これ以上の場合にgzip圧縮する)
  gzip_min_length 1024;

  # キャッシュのファイルパスとパラメータ。最大キャッシュサイズやキャッシュ期間など。
  # http://nginx.org/en/docs/http/ngx_http_proxy_module.html
  # A 1‑MB zone can store data for about 8,000 keys
  proxy_cache_path /var/cache/nginx/xyz levels=1:2 keys_zone=xyz_bff:16m max_size=3g inactive=30m;
  proxy_cache_path /var/cache/nginx/abc levels=1:2 keys_zone=abc_bff:16m max_size=3g inactive=30m;

  # WebSocket対応のためUpgrade
  # プロキシのHTTPプロトコルバージョン(デフォルト:1.0)
  proxy_http_version 1.1;
  proxy_set_header Host $host;
  proxy_set_header Upgrade $http_upgrade;
  proxy_set_header Connection 'upgrade';

  # リクエスト元の設定
  proxy_set_header X-Real-IP $remote_addr;
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_set_header X-Forwarded-Proto $scheme;
  proxy_set_header X-Forwarded-Host $host;
  proxy_set_header X-Forwarded-Port $server_port;

  # リクエスト転送先のサーバー定義
  upstream xyz-backend {
    server poc-xyz-bff-service.poc.internal:3000;
  }

  upstream abc-backend {
    server poc-abc-bff-service.poc.internal:3000;
  }

  server {
    listen 80 default_server;
    server_name $hostname;

    location /health {
      access_log off;
      return 200 "nginx is healthy\n";
    }

    location ~ ^/([^\/]+/)?xyz/ {
      if ($request_method !~ ^(GET|POST|HEAD|OPTIONS|PUT|DELETE)$) {
        return 405;
      }

      # プロキシ先
      rewrite ^/([^\/]+/)?xyz/(.*) /xyz/$2 break;
      proxy_pass http://xyz-backend;

      # リクエストキャッシュの際に無視するヘッダー
      proxy_ignore_headers X-Accel-Expires Cache-Control Expires;

      # キャッシュキーゾーン名s
      proxy_cache xyz_bff;
      # キャッシュキーとしてこれをmd5化したものを使う
      proxy_cache_key "$scheme$proxy_host$request_uri";
      # キャッシュ対象のHTTPステータスとキャッシュ時間
      proxy_cache_valid 200 302 60m;
      proxy_cache_valid 404 1m;
      # キャッシュされるまでに必要なリクエスト回数
      proxy_cache_min_uses 1;
      # オリジンがダウンしたときにキャッシュされたコンテンツを配信する
      proxy_cache_use_stale error timeout http_500 http_502 http_503 http_504;
    }

    location ~ ^/([^\/]+/)?abc/ {
      if ($request_method !~ ^(GET|POST|HEAD|OPTIONS|PUT|DELETE)$) {
        return 405;
      }

      # プロキシ先
      rewrite ^/([^\/]+/)?abc/(.*) /abc/$2 break;
      proxy_pass http://abc-backend;

      # リクエストキャッシュの際に無視するヘッダー
      proxy_ignore_headers X-Accel-Expires Cache-Control Expires;

      # キャッシュキーゾーン名s
      proxy_cache abc_bff;
      # キャッシュキーとしてこれをmd5化したものを使う
      proxy_cache_key "$scheme$host$proxy_host$request_uri";
      # キャッシュ対象のHTTPステータスとキャッシュ時間
      proxy_cache_valid 200 302 60m;
      proxy_cache_valid 404 1m;
      # キャッシュされるまでに必要なリクエスト回数
      proxy_cache_min_uses 1;
      # オリジンがダウンしたときにキャッシュされたコンテンツを配信する
      proxy_cache_use_stale error timeout http_500 http_502 http_503 http_504;
    }
  }
}